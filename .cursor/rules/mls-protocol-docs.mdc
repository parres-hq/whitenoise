---
description: MLS (Messaging Layer Security) Protocol Documentation and Resources
globs:
alwaysApply: true
---

# MLS Protocol Documentation and Resources

This project implements the MLS (Messaging Layer Security) protocol on top of Nostr. Below are key resources and documentation that LLMs should reference when working on MLS-related code.

## Official MLS Specifications

- **RFC 9420**: The Messaging Layer Security (MLS) Protocol
  - Official IETF specification: https://www.rfc-editor.org/rfc/rfc9420.html
  - Local copy: [docs/mls/rfc9420.txt](mdc:docs/mls/rfc9420.txt)

- **RFC 9750**: MLS Architecture
  - Official IETF specification: https://www.rfc-editor.org/rfc/rfc9750.html
  - Local copy: [docs/mls/rfc9750.txt](mdc:docs/mls/rfc9750.txt)

## Nostr MLS Integration

- **NIP-EE**: Nostr MLS Implementation Spec (Official)
  - Official specification: https://github.com/nostr-protocol/nips/blob/master/EE.md
  - Local implementation notes: [docs/mls/nip-ee-implementation.md](mdc:docs/mls/nip-ee-implementation.md)

## Implementation References

- **Rust nostr-mls crate**: https://github.com/rust-nostr/nostr
  - Used in this project via `Cargo.toml` dependencies
  - Local integration docs: [docs/mls/nostr-mls-integration.md](mdc:docs/mls/nostr-mls-integration.md)

## Key Implementation Files

The following files contain core MLS functionality in this project:
- `src/whitenoise/event_processor/event_handlers/handle_mls_message.rs` - MLS message processing
- `src/whitenoise/key_packages.rs` - MLS key package management
- `src/whitenoise/groups.rs` - MLS group management
- `src/whitenoise/welcomes.rs` - MLS welcome message handling

## Security Considerations

When working with MLS code, always consider:
1. Forward secrecy guarantees
2. Post-compromise security
3. Group membership authentication
4. Message ordering and consistency
5. Key rotation procedures

## Testing and Integration

- Integration tests for MLS: `src/integration_tests`
- Run unit tests: `just test`
- Full integration tests: `just int-test`
