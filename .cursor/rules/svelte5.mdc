---
description: 
globs: 
alwaysApply: true
---
# White Noise

This project is called White Noise, a secure messenger app written in Rust and TypeScript. It implements secure direct and group messaging using [Messaging Layer Security protocol](https://www.rfc-editor.org/rfc/rfc9420.txt) via the [OpenMLS implementation library](https://www.github.com/openmls/openmls) and using the [Nostr Protocol](https://raw.githubusercontent.com/nostr-protocol/nips/refs/heads/master/README.md) as the delivery/transport mechanism. White Noise uses several of the [rust-nostr](https://github.com/rust-nostr/nostr) rust crates to implement Nostr functionality in the app.

## Project Structure

White Noise is a [Tauri 2](https://tauri.app/) app that uses Rust on the backend and [SvelteKit](https://svelte.dev/) (with TypeScript) for the front-end. The project is organanized like a standard Tauri app, with `/src` being for the front-end code and `/src-tauri` being the backend code. The app is set up to build for Android, iOS, Linux desktop, & Macos desktop. You can find all the code for the mobile apps in the `/src-tauri/gen/apple` and `/src-tauri/gen/android` directories.

## Tauri, Svelte, Bun, Biome, shadcn-svelte

White Noise uses Tauri 2.x and Svelte 5.x (always use Svelte's new runes mode).

Dependencies on the backend are managed with Cargo. We use clippy and rustfmt to ensure standardized formatting and linting in Rust.
Dependencies on the front-end are managed with [Bun](https://bun.sh). You can use the `bun add` command to add any `npm` dependency. Most of the Bun commands are analogous or exactly the same as the `npm` commands of the same name. We use [biome.js](https://biomejs.dev/) to manage formatting and linting in JS/TS.

You'll find useful scripts for running tests, formatting, linting, and other things in the `/package.json` file.

We are in the middle of transitioning to using [shadcn-svelte](https://shadcn-svelte.com) components. Right now, you'll find a mix of custom components and newer shadcn based components. When you need to create a new component, please ask about whether to create (or replace) something custom with a shadcn component before making changes.

## Nostr

Nostr is a decentralized social media protocol involving clients, relays, keys, and a unified Nostr event format.

Specifications on Nostr are called "NIPs". NIP stands for "Nostr Implementation Possibilities". NIPs are numbered like `NIP-XX` where `XX` are two capitalized hexadecimal digits, eg `NIP-01` and `NIP-C7`.

To learn about Nostr, use the fetch tool to read [NIP-01](https://raw.githubusercontent.com/nostr-protocol/nips/refs/heads/master/01.md).

To read a specific NIP, construct the NIP URL following this template: `https://raw.githubusercontent.com/nostr-protocol/nips/refs/heads/master/{nip}.md` (replace `{nip}` in the URL template with the relevant NIP name, eg `07` for NIP-07, or `C7` for NIP-C7). Then use the fetch tool to read the URL.

To read the definition of a specific kind, construct a URL following this template: `https://nostrbook.dev/kinds/{kind}.md` (replace `{kind}` in the template with the kind number, eg `https://nostrbook.dev/kinds/0.md` for kind 0).

To discover the full list of NIPs, use the fetch tool to read the [NIPs README](https://raw.githubusercontent.com/nostr-protocol/nips/refs/heads/master/README.md).

It's important that White Noise conforms to Nostr standards. Please read as much of the NIPs as you need to have a full understanding before adding or modifying Nostr events and filters. It is possible to add new ideas to Nostr that don't exist yet in the NIPs, but only after other options have been explored. Care must be taken when adding new Nostr ideas, to ensure they fit seamlessly within the existing Nostr ecosystem.

## How White Noise uses Nostr

White Noise is implementing a new NIP ([NIP-EE](https://raw.githubusercontent.com/nostr-protocol/nips/001c516f7294308143515a494a35213fc45978df/EE.md)) that specifies how to use MLS (Messaging Layer Security) with Nostr. This NIP is still in development but mostly complete. If you run into anything that doesn't seem correct in White Noise, you should bring it up before making any changes.

The goal of White Noise is to provide a secure messenger that allows groups (from just 2 people to many thousadnds of people) to chat. White Noise doesn't require any centralized third party servers for identity or delivery management which makes it a better more freedom-focused messenger. You should take great care to follow security best practices (making sure to highlight potential threat vectors) and work to ensure use privacy in everything you build. We want to minimize metadata that is sent in plaintext to Nostr relays at all costs.

## Testing Changes

After making changes, please run `bun run check-all` to check for formatting & linting errors and run tests. If there are any errors, please try to fix them. Please don't try and run the app to check that things are working.

# Svelte 5

I'm using svelte 5 instead of svelte 4 here is an overview of the changes.

#### Overview

Svelte 5 introduces runes, a set of advanced primitives for controlling reactivity. The runes replace certain non-runes features and provide more explicit control over state and effects.

#### $state

- **Purpose:** Declare reactive state.
- **Usage:**

```javascript
<script>let count = $state(0);</script>
```

- **Replaces:** Top-level `let` declarations in non-runes mode.
- **Class Fields:**

```javascript
class Todo {
  done = $state(false);
  text = $state();
  constructor(text) {
    this.text = text;
  }
}
```

- **Deep Reactivity:** Only plain objects and arrays become deeply reactive.

#### $state.raw

- **Purpose:** Declare state that cannot be mutated, only reassigned.
- **Usage:**

```javascript
<script>let numbers = $state.raw([1, 2, 3]);</script>
```

- **Performance:** Improves with large arrays and objects.

#### $state.snapshot

- **Purpose:** Take a static snapshot of $state.
- **Usage:**

```javascript
<script>
	let counter = $state({ count: 0 });

	function onClick() {
		console.log($state.snapshot(counter));
	}
</script>
```

#### $derived

- **Purpose:** Declare derived state.
- **Usage:**

```javascript
<script>let count = $state(0); let doubled = $derived(count * 2);</script>
```

- **Replaces:** Reactive variables computed using `$:` in non-runes mode.

#### $derived.by

- **Purpose:** Create complex derivations with a function.
- **Usage:**

```javascript
<script>
  let numbers = $state([1, 2, 3]); let total = $derived.by(() =>
  numbers.reduce((a, b) => a + b, 0));
</script>
```

#### $effect

- **Purpose:** Run side-effects when values change.
- **Usage:**

```javascript
<script>
	let size = $state(50);
	let color = $state('#ff3e00');

	$effect(() => {
		const context = canvas.getContext('2d');
		context.clearRect(0, 0, canvas.width, canvas.height);
		context.fillStyle = color;
		context.fillRect(0, 0, size, size);
	});
</script>
```

- **Replacements:** $effect replaces a substantial part of `$: {}` blocks triggering side-effects.

#### $effect.pre

- **Purpose:** Run code before the DOM updates.
- **Usage:**

```javascript
<script>
  $effect.pre(() =>{" "}
  {
    // logic here
  }
  );
</script>
```

- **Replaces:** beforeUpdate.

#### $effect.tracking

- **Purpose:** Check if code is running inside a tracking context.
- **Usage:**

```javascript
<script>console.log('tracking:', $effect.tracking());</script>
```

#### $props

- **Purpose:** Declare component props.
- **Usage:**

```javascript
<script>let {(prop1, prop2)} = $props();</script>
```

- **Replaces:** export let syntax for declaring props.

#### $bindable

- **Purpose:** Declare bindable props.
- **Usage:**

```javascript
<script>let {(bindableProp = $bindable("fallback"))} = $props();</script>
```

#### $inspect

- **Purpose:** Equivalent to `console.log` but re-runs when its argument changes.
- **Usage:**

```javascript
<script>let count = $state(0); $inspect(count);</script>
```

#### $host

- **Purpose:** Retrieve the this reference of the custom element.
- **Usage:**

```javascript
<script>
	function greet(greeting) {
		$host().dispatchEvent(new CustomEvent('greeting', { detail: greeting }));
	}
</script>
```

- **Note:** Only available inside custom element components on the client-side.

#### Overview of snippets in svelte 5

Snippets, along with render tags, help create reusable chunks of markup inside your components, reducing duplication and enhancing maintainability.

#### Snippets Usage

- **Definition:** Use the `#snippet` syntax to define reusable markup sections.
- **Basic Example:**

```javascript
{#snippet figure(image)}
	<figure>
		<img src={image.src} alt={image.caption} width={image.width} height={image.height} />
		<figcaption>{image.caption}</figcaption>
	</figure>
{/snippet}
```

- **Invocation:** Render predefined snippets with `@render`:

```javascript
{@render figure(image)}
```

- **Destructuring Parameters:** Parameters can be destructured for concise usage:

```javascript
{#snippet figure({ src, caption, width, height })}
	<figure>
		<img alt={caption} {src} {width} {height} />
		<figcaption>{caption}</figcaption>
	</figure>
{/snippet}
```

#### Snippet Scope

- **Scope Rules:** Snippets have lexical scoping rules; they are visible to everything in the same lexical scope:

```javascript
<div>
	{#snippet x()}
		{#snippet y()}...{/snippet}

		<!-- valid usage -->
		{@render y()}
	{/snippet}

	<!-- invalid usage -->
	{@render y()}
</div>

<!-- invalid usage -->
{@render x()}
```

- **Recursive References:** Snippets can self-reference or reference other snippets:

```javascript
{#snippet blastoff()}
	<span>ðŸš€</span>
{/snippet}

{#snippet countdown(n)}
	{#if n > 0}
		<span>{n}...</span>
		{@render countdown(n - 1)}
	{:else}
		{@render blastoff()}
	{/if}
{/snippet}

{@render countdown(10)}
```

#### Passing Snippets to Components

- **Direct Passing as Props:**

```javascript
<script>
	import Table from './Table.svelte';
	const fruits = [{ name: 'apples', qty: 5, price: 2 }, ...];
</script>

{#snippet header()}
	<th>fruit</th>
	<th>qty</th>
	<th>price</th>
	<th>total</th>
{/snippet}

{#snippet row(fruit)}
	<td>{fruit.name}</td>
	<td>{fruit.qty}</td>
	<td>{fruit.price}</td>
	<td>{fruit.qty * fruit.price}</td>
{/snippet}

<Table data={fruits} {header} {row} />
```

- **Implicit Binding:**

```html
<table data="{fruits}">
  {#snippet header()}
  <th>fruit</th>
  <th>qty</th>
  <th>price</th>
  <th>total</th>
  {/snippet} {#snippet row(fruit)}
  <td>{fruit.name}</td>
  <td>{fruit.qty}</td>
  <td>{fruit.price}</td>
  <td>{fruit.qty * fruit.price}</td>
  {/snippet}
</table>
```

- **Children Snippet:** Non-snippet content defaults to the `children` snippet:

```html
<table data="{fruits}">
  <th>fruit</th>
  <th>qty</th>
  <th>price</th>
  <th>total</th>
  <!-- additional content -->
</table>

<script>
  let { data, children, row } = $props();
</script>

<table>
  <thead>
    <tr>
      {@render children()}
    </tr>
  </thead>
  <!-- table body -->
</table>
```

- **Avoid Conflicts:** Do not use a prop named `children` if also providing content inside the component.

#### Typing Snippets

- **TypeScript Integration:**

```typescript
<script lang="ts">
	import type { Snippet } from 'svelte';

	let { data, children, row }: {
		data: any[];
		children: Snippet;
		row: Snippet<[any]>;
	} = $props();
</script>
```

- **Generics for Improved Typing:**

```typescript
<script lang="ts" generics="T">
	import type { Snippet } from 'svelte';

	let { data, children, row }: {
		data: T[];
		children: Snippet;
		row: Snippet<[T]>;
	} = $props();
</script>
```

#### Creating Snippets Programmatically

- **Advanced Use:** Create snippets programmatically using `createRawSnippet` where necessary.

#### Snippets and Slots

- **Mixing with Slots:** Slots are deprecated but still work. Snippets provide more flexibility and power.
- **Custom Elements:** Continue using `<slot />` for custom elements as usual.

Sure! Here are the succinct instructions for handling Event Handlers in Svelte 5, tailored for the AI-integrated code editor to help it understand and utilize these features effectively.

---

### Custom Instructions for Svelte 5 Event Handlers in Cursor AI

#### Overview

In Svelte 5, event handlers are treated as properties, simplifying their use and integrating them more closely with the rest of the properties in the component.

#### Basic Event Handlers

- **Declaration:** Use properties to attach event handlers.

```javascript
<script>
	let count = $state(0);
</script>

<button onclick={() => count++}>
	clicks: {count}
</button>
```

- **Shorthand Syntax:**

```javascript
<script>
	let count = $state(0);

	function handleClick() {
		count++;
	}
</script>

<button {handleClick}>
	clicks: {count}
</button>
```

- **Deprecation:** The traditional `on:` directive is deprecated.

#### Component Events

- **Replacing createEventDispatcher:** Components should accept callback props instead of using `createEventDispatcher`.

```javascript
<script>
	import Pump from './Pump.svelte';

	let size = $state(15);
	let burst = $state(false);

	function reset() {
		size = 15;
		burst = false;
	}
</script>

<Pump
	inflate={(power) => { size += power; if (size > 75) burst = true; }}
	deflate={(power) => { if (size > 0) size -= power; }}
/>

{#if burst}
	<button onclick={reset}>new balloon</button>
	<span class="boom">ðŸ’¥</span>
{:else}
	<span class="balloon" style="scale: {0.01 * size}"> ðŸŽˆ </span>
{/if}
```

#### Bubbling Events

- **Accept Callback Props:**

```javascript
<script>
	let { onclick, children } = $props();
</script>

<button {onclick}>
	{@render children()}
</button>
```

- **Spreading Props:**

```javascript
<script>
	let { children, ...props } = $props();
</script>

<button {...props}>
	{@render children()}
</button>
```

#### Event Modifiers

- **Avoiding Modifiers:** Modifiers like `|once`, `|preventDefault`, etc., are not supported. Use wrapper functions instead.
- **Example Wrapper Functions:**

```javascript
<script>
	function once(fn) {
		return function (event) {
			if (fn) fn.call(this, event);
			fn = null;
		};
	}

	function preventDefault(fn) {
		return function (event) {
			event.preventDefault();
			fn.call(this, event);
		};
	}
</script>

<button onclick={once(preventDefault(handler))}>...</button>
```

- **Special Modifiers:** For `capture`:

```javascript
<button onclickcapture={...}>...</button>
```

#### Multiple Event Handlers

- **Combining Handlers:** Instead of using multiple handlers, combine them into one.

```javascript
<button
  onclick={(e) => {
    handlerOne(e);
    handlerTwo(e);
  }}
>
  ...
</button>
```

---

### examples old vs new

#### Counter Example

- **Svelte 4 vs. Svelte 5:**

  - **Before:**

  ```html
  <script>
    let count = 0;
    $: double = count * 2;
    $: {
      if (count > 10) alert("Too high!");
    }
  </script>

  <button on:click="{()" ="">count++}> {count} / {double}</button>
  ```

  - **After:**

  ```html
  <script>
    let count = $state(0);
    let double = $derived(count * 2);
    $effect(() => {
      if (count > 10) alert("Too high!");
    });
  </script>

  <button onclick="{()" ="">count++}> {count} / {double}</button>
  ```

#### Tracking Dependencies

- **Svelte 4 vs. Svelte 5:**

  - **Before:**

  ```html
  <script>
    let a = 0;
    let b = 0;
    $: sum = add(a, b);

    function add(x, y) {
      return x + y;
    }
  </script>

  <button on:click="{()" ="">a++}>a++</button>
  <button on:click="{()" ="">b++}>b++</button>
  <p>{a} + {b} = {sum}</p>
  ```

  - **After:**

  ```html
  <script>
    let a = $state(0);
    let b = $state(0);
    let sum = $derived(add());

    function add() {
      return a + b;
    }
  </script>

  <button onclick="{()" ="">a++}>a++</button>
  <button onclick="{()" ="">b++}>b++</button>
  <p>{a} + {b} = {sum}</p>
  ```

#### Untracking Dependencies

- **Svelte 4 vs. Svelte 5:**

  - **Before:**

  ```html
  <script>
    let a = 0;
    let b = 0;
    $: sum = a + noTrack(b);

    function noTrack(value) {
      return value;
    }
  </script>

  <button on:click="{()" ="">a++}>a++</button>
  <button on:click="{()" ="">b++}>b++</button>
  <p>{a} + {b} = {sum}</p>
  ```

  - **After:**

  ```html
  <script>
    import { untrack } from "svelte";

    let a = $state(0);
    let b = $state(0);
    let sum = $derived(add());

    function add() {
      return a + untrack(() => b);
    }
  </script>

  <button onclick="{()" ="">a++}>a++</button>
  <button onclick="{()" ="">b++}>b++</button>
  <p>{a} + {b} = {sum}</p>
  ```

#### Simple Component Props

- **Svelte 5:**

  ```html
  <script>
    let { count = 0 } = $props();
  </script>

  {count}
  ```

#### Advanced Component Props

- **Svelte 5:**

  ```html
  <script>
    let { class: classname, ...others } = $props();
  </script>

  <pre class="{classname}">
    {JSON.stringify(others)}
  </pre>
  ```

#### Autoscroll Example

- **Svelte 4 vs. Svelte 5:**

  - **Before:**

  ```html
  <script>
    import { tick, beforeUpdate } from "svelte";

    let theme = "dark";
    let messages = [];
    let viewport;
    let updatingMessages = false;

    beforeUpdate(() => {
      if (updatingMessages) {
        const autoscroll =
          viewport &&
          viewport.offsetHeight + viewport.scrollTop >
            viewport.scrollHeight - 50;
        if (autoscroll) {
          tick().then(() => viewport.scrollTo(0, viewport.scrollHeight));
        }
      }
    });

    function handleKeydown(event) {
      if (event.key === "Enter") {
        const text = event.target.value;
        if (text) {
          messages = [...messages, text];
          updatingMessages = true;
          event.target.value = "";
        }
      }
    }

    function toggle() {
      theme = theme === "dark" ? "light" : "dark";
    }
  </script>

  <div class:dark="{theme" ="" ="" ="dark" }>
    <div bind:this="{viewport}">
      {#each messages as message}
      <p>{message}</p>
      {/each}
    </div>

    <input on:keydown="{handleKeydown}" />
    <button on:click="{toggle}">Toggle dark mode</button>
  </div>
  ```

  - **After:**

  ```html
  <script>
    import { tick } from "svelte";

    let theme = $state("dark");
    let messages = $state([]);
    let viewport;

    $effect.pre(() => {
      messages;
      const autoscroll =
        viewport &&
        viewport.offsetHeight + viewport.scrollTop > viewport.scrollHeight - 50;
      if (autoscroll) {
        tick().then(() => viewport.scrollTo(0, viewport.scrollHeight));
      }
    });

    function handleKeydown(event) {
      if (event.key === "Enter") {
        const text = event.target.value;
        if (text) {
          messages = [...messages, text];
          event.target.value = "";
        }
      }
    }

    function toggle() {
      theme = theme === "dark" ? "light" : "dark";
    }
  </script>

  <div class:dark="{theme" ="" ="" ="dark" }>
    <div bind:this="{viewport}">
      {#each messages as message}
      <p>{message}</p>
      {/each}
    </div>

    <input onkeydown="{handleKeydown}" />
    <button onclick="{toggle}">Toggle dark mode</button>
  </div>
  ```

#### Forwarding Events

- **Svelte 5:**

  ```html
  <script>
    let { ...props } = $props();
  </script>

  <button {...props}>a button</button>
  ```

#### Passing UI Content to a Component

- **Passing content using snippets:**

  ```html
  <!-- consumer -->
  <script>
    import Button from "./Button.svelte";
  </script>

  <button>{#snippet children(prop)} click {prop} {/snippet}</button>

  <!-- provider (Button.svelte) -->
  <script>
    let { children } = $props();
  </script>

  <button>{@render children("some value")}</button>
  ```

I'm also using sveltekit 2 which also has some changes I'd like you to keep in mind

### Redirect and Error Handling

In SvelteKit 2, it is no longer necessary to throw the results of `error(...)` and `redirect(...)`. Simply calling them is sufficient.

**SvelteKit 1:**

```javascript
import { error } from "@sveltejs/kit";

function load() {
  throw error(500, "something went wrong");
}
```

**SvelteKit 2:**

```javascript
import { error } from "@sveltejs/kit";

function load() {
  error(500, "something went wrong");
}
```

**Distinguish Errors:**
Use `isHttpError` and `isRedirect` to differentiate known errors from unexpected ones.

```javascript
import { isHttpError, isRedirect } from "@sveltejs/kit";

try {
  // some code
} catch (err) {
  if (isHttpError(err) || isRedirect(err)) {
    // handle error
  }
}
```

### Cookie Path Requirement

Cookies now require a specified path when set, deleted, or serialized.

**SvelteKit 1:**

```javascript
export function load({ cookies }) {
  cookies.set(name, value);
  return { response };
}
```

**SvelteKit 2:**

```javascript
export function load({ cookies }) {
  cookies.set(name, value, { path: "/" });
  return { response };
}
```

### Top-Level Promise Handling

Promises in `load` functions are no longer awaited automatically.

**Single Promise:**

**SvelteKit 1:**

```javascript
export function load({ fetch }) {
    return {
        response: fetch(...).then(r => r.json())
    };
}
```

**SvelteKit 2:**

```javascript
export async function load({ fetch }) {
    const response = await fetch(...).then(r => r.json());
    return { response };
}
```

**Multiple Promises:**

**SvelteKit 1:**

```javascript
export function load({ fetch }) {
    return {
        a: fetch(...).then(r => r.json()),
        b: fetch(...).then(r => r.json())
    };
}
```

**SvelteKit 2:**

```javascript
export async function load({ fetch }) {
    const [a, b] = await Promise.all([
        fetch(...).then(r => r.json()),
        fetch(...).then(r => r.json())
    ]);
    return { a, b };
}
```

### `goto` Changes

`goto(...)` no longer accepts external URLs. Use `window.location.href = url` for external navigation.

### Relative Paths Default

Paths are now relative by default, ensuring portability across different environments. The `paths.relative` config option manages this behavior.

### Deprecated Settings and Functions

- **Server Fetches** are no longer trackable.
- **`preloadCode` Arguments:** Must be prefixed with the base path.
- **`resolvePath` Replacement:** Use `resolveRoute` instead.

```javascript
import { resolveRoute } from "$app/paths";

const path = resolveRoute("/blog/[slug]", { slug: "hello" });
```

### Improved Error Handling

Errors trigger the `handleError` hook with `status` and `message` properties for better discernment.

### Dynamic Environment Variables

Dynamic environment variables cannot be used during prerendering. Use static modules instead.

### `use:enhance` Callback Changes

The properties `form` and `data` have been removed from `use:enhance` callbacks, replaced by `formElement` and `formData`.

### Forms with File Inputs

Forms containing `<input type="file">` must use `enctype="multipart/form-data"`.

With these adjusted guidelines, your AI can now generate SvelteKit 2 code accurately while considering the migration changes.
