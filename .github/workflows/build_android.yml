name: "Android Build"

on:
  workflow_call:
    secrets:
      ANDROID_KEY_ALIAS:
        required: true
      ANDROID_KEY_PASSWORD:
        required: true
      ANDROID_KEY_BASE64:
        required: true
  push:
    branches:
      - master
    paths:
      - 'src-tauri/**'
      - 'src/**'
      - 'static/**'
      - 'package.json'
      - 'bun.lockb'
      - 'svelte.config.js'
      - 'tailwind.config.js'
      - 'vite.config.js'
      - '.github/workflows/build_android.yml'
  pull_request:
    paths:
      - 'src-tauri/**'
      - 'src/**'
      - 'static/**'
      - 'package.json'
      - 'bun.lockb'
      - 'svelte.config.js'
      - 'tailwind.config.js'
      - 'vite.config.js'
      - '.github/workflows/build_android.yml'

env:
  NDK_VERSION: "25.2.9519653"
  BUN_VERSION: "1.1.39"
  JAVA_VERSION: "17"

# Add concurrency group to cancel redundant workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      android_sdk_root: ${{ steps.android-paths.outputs.android-sdk-root }}
      android_ndk_home: ${{ steps.android-paths.outputs.android-ndk-home }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get-version
        run: |
          VERSION=$(grep '^version[[:space:]]*=[[:space:]]*"' src-tauri/Cargo.toml | sed 's/^version[[:space:]]*=[[:space:]]*"\(.*\)"/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Clean system packages
        run: |
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/*

      - name: Setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "src-tauri -> target"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        id: setup-android
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: "12266719"
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true
          packages: "tools platform-tools ndk;${{ env.NDK_VERSION }}"
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
          ANDROID_HOME: ${{ github.workspace }}/android-sdk
          ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk-${{ env.NDK_VERSION }}
          NDK_HOME: ${{ github.workspace }}/android-ndk-${{ env.NDK_VERSION }}

      - name: Set Android paths
        id: android-paths
        run: |
          echo "android-sdk-root=$ANDROID_SDK_ROOT" >> $GITHUB_OUTPUT
          echo "android-ndk-home=$ANDROID_NDK_HOME" >> $GITHUB_OUTPUT

      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: ${{ steps.android-paths.outputs.android-ndk-home }}
          key: android-ndk-${{ env.NDK_VERSION }}
          restore-keys: |
            android-ndk-

      - name: Install Android NDK
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          ${{ steps.android-paths.outputs.android-sdk-root }}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${{ steps.android-paths.outputs.android-sdk-root }} --install "ndk;${{ env.NDK_VERSION }}" || exit 1
          mkdir -p ${{ steps.android-paths.outputs.android-ndk-home }}
          cp -r ${{ steps.android-paths.outputs.android-sdk-root }}/ndk/${{ env.NDK_VERSION }}/* ${{ steps.android-paths.outputs.android-ndk-home }}/ || exit 1

      - name: Configure Gradle
        run: |
          echo "org.gradle.caching=true" >> gradle.properties
          echo "org.gradle.configureondemand=true" >> gradle.properties
          echo "org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m" >> gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties
          echo "org.gradle.daemon=false" >> gradle.properties
          echo "org.gradle.workers.max=2" >> gradle.properties
          echo "android.enableBuildCache=true" >> gradle.properties
          echo "android.enableR8.fullMode=true" >> gradle.properties
          echo "android.enableJetifier=false" >> gradle.properties

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install frontend dependencies
        run: bun install

      - name: Clean npm cache
        run: |
          bun clean || true
          rm -rf ~/.bun/install/cache/*
          rm -rf node_modules/.cache

      - name: Clean Rust build artifacts
        run: |
          rm -rf src-tauri/target/*/debug
          rm -rf src-tauri/target/*/release
          rm -rf src-tauri/target/*/build
          rm -rf src-tauri/target/*/deps
          rm -rf src-tauri/target/*/examples
          rm -rf src-tauri/target/*/incremental
          rm -rf src-tauri/target/*/.rustc_info.json
          rm -rf src-tauri/target/*/.fingerprint

  build-android-universal:
    needs: setup
    runs-on: ubuntu-22.04
    env:
      VERSION: ${{ needs.setup.outputs.version }}
      ANDROID_SDK_ROOT: ${{ needs.setup.outputs.android_sdk_root }}
      ANDROID_HOME: ${{ needs.setup.outputs.android_sdk_root }}
      ANDROID_NDK_HOME: ${{ needs.setup.outputs.android_ndk_home }}
      NDK_HOME: ${{ needs.setup.outputs.android_ndk_home }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install frontend dependencies
        run: bun install

      - name: Configure Gradle
        run: |
          echo "org.gradle.caching=true" >> gradle.properties
          echo "org.gradle.configureondemand=true" >> gradle.properties
          echo "org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m" >> gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties
          echo "org.gradle.daemon=false" >> gradle.properties
          echo "org.gradle.workers.max=2" >> gradle.properties
          echo "android.enableBuildCache=true" >> gradle.properties
          echo "android.enableR8.fullMode=true" >> gradle.properties
          echo "android.enableJetifier=false" >> gradle.properties

      - name: Setup Android signing
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      - name: Build Android universal binary
        run: bun tauri android build
        continue-on-error: false

      - name: Clean Gradle caches
        run: |
          rm -rf ~/.gradle/caches/*
          rm -rf ~/.gradle/wrapper/*
          rm -rf src-tauri/gen/android/.gradle
          rm -rf src-tauri/gen/android/app/build/intermediates
          rm -rf src-tauri/gen/android/app/build/tmp

      - name: Prepare universal artifact
        run: |
          mkdir -p android-artifacts
          # Copy and rename universal AAB
          cp src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab android-artifacts/whitenoise-${VERSION}-android-universal.aab
          cp src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk android-artifacts/whitenoise-${VERSION}-android-universal.apk

          # Generate checksums
          cd android-artifacts
          for file in *; do
            sha256sum "$file" > "${file}.sha256"
          done

      - name: Upload universal artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-universal
          path: android-artifacts/*
          if-no-files-found: error

      - name: Clean up after universal build
        run: |
          rm -rf src-tauri/gen/android/app/build
          rm -rf src-tauri/target
          rm -rf node_modules
          rm -rf ~/.bun/install/cache/*
          rm -rf ~/.gradle/caches/*
          rm -rf ~/.gradle/wrapper/*
          rm -rf $RUNNER_TEMP/*

  build-android-split:
    needs: setup
    runs-on: ubuntu-22.04
    env:
      VERSION: ${{ needs.setup.outputs.version }}
      ANDROID_SDK_ROOT: ${{ needs.setup.outputs.android_sdk_root }}
      ANDROID_HOME: ${{ needs.setup.outputs.android_sdk_root }}
      ANDROID_NDK_HOME: ${{ needs.setup.outputs.android_ndk_home }}
      NDK_HOME: ${{ needs.setup.outputs.android_ndk_home }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install frontend dependencies
        run: bun install

      - name: Configure Gradle
        run: |
          echo "org.gradle.caching=true" >> gradle.properties
          echo "org.gradle.configureondemand=true" >> gradle.properties
          echo "org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m" >> gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties
          echo "org.gradle.daemon=false" >> gradle.properties
          echo "org.gradle.workers.max=2" >> gradle.properties
          echo "android.enableBuildCache=true" >> gradle.properties
          echo "android.enableR8.fullMode=true" >> gradle.properties
          echo "android.enableJetifier=false" >> gradle.properties

      - name: Setup Android signing
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      - name: Build Android split APKs
        run: bun tauri android build --apk --split-per-abi
        continue-on-error: false

      - name: Clean Gradle caches
        run: |
          rm -rf ~/.gradle/caches/*
          rm -rf ~/.gradle/wrapper/*
          rm -rf src-tauri/gen/android/.gradle
          rm -rf src-tauri/gen/android/app/build/intermediates
          rm -rf src-tauri/gen/android/app/build/tmp

      - name: Prepare split artifacts
        run: |
          mkdir -p android-artifacts
          # Copy and rename split APKs with exact paths
          cp src-tauri/gen/android/app/build/outputs/apk/arm64/release/app-arm64-release.apk android-artifacts/whitenoise-${VERSION}-android-arm64.apk
          cp src-tauri/gen/android/app/build/outputs/apk/arm/release/app-arm-release.apk android-artifacts/whitenoise-${VERSION}-android-arm.apk
          cp src-tauri/gen/android/app/build/outputs/apk/x86_64/release/app-x86_64-release.apk android-artifacts/whitenoise-${VERSION}-android-x86_64.apk
          cp src-tauri/gen/android/app/build/outputs/apk/x86/release/app-x86-release.apk android-artifacts/whitenoise-${VERSION}-android-x86.apk

          # Generate checksums
          cd android-artifacts
          for file in *.apk; do
            sha256sum "$file" > "${file}.sha256"
          done

      - name: Upload split artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-split
          path: android-artifacts/*
          if-no-files-found: error

      - name: Clean up after split build
        run: |
          rm -rf src-tauri/gen/android/app/build
          rm -rf src-tauri/target
          rm -rf node_modules
          rm -rf ~/.bun/install/cache/*
          rm -rf ~/.gradle/caches/*
          rm -rf ~/.gradle/wrapper/*
          rm -rf $RUNNER_TEMP/*

  collect-android-artifacts:
    needs: [setup, build-android-universal, build-android-split]
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: android-*
          path: all-artifacts
          merge-multiple: true

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: all-artifacts/*
          if-no-files-found: error
