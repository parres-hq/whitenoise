name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick checks that fail fast
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.90.0"
          components: rustfmt

      - name: Format check
        run: cargo fmt --all -- --config format_code_in_doc_comments=true --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.90.0"
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Clippy check
        run: cargo clippy --all-targets --all-features --no-deps -- -D warnings -A clippy::uninlined_format_args

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.90.0"

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Documentation check
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Security audit
        uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Skip advisories:
          # - RUSTSEC-2023-0071: RSA Marvin Attack (transitive via sqlx-mysql, not used in our SQLite-only app)
          # - RUSTSEC-2024-0384: instant unmaintained (transitive via rust-nostr, low risk)
          ignore: RUSTSEC-2023-0071,RUSTSEC-2024-0384

  # Build and test matrix
  test:
    name: Test (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            run-integration: true
          - os: macos-latest
            run-integration: false
          - os: macos-14
            run-integration: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.90.0"

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      - name: Start Docker Compose services (Linux)
        if: runner.os == 'Linux'
        run: docker compose up -d

      - name: Wait for services to be ready (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Running Nostr health checks..."
          sleep 5
          echo "Checking if services are running:"
          docker compose ps
          echo "Checking relay logs for startup issues:"
          echo "=== nostr-rs-relay logs ==="
          docker compose logs nostr-rs-relay
          echo "=== strfry-nostr-relay logs ==="
          docker compose logs strfry-nostr-relay
          echo "Testing basic HTTP connectivity first:"
          curl -v http://localhost:8080/ || echo "nostr-rs-relay HTTP failed"
          curl -v http://localhost:7777/ || echo "strfry HTTP failed"
          echo "Testing WebSocket connectivity:"
          ./scripts/wait_for_relays.sh

      - name: Check
        run: cargo check --all-targets --all-features

      - name: Build
        run: cargo build --all-targets --all-features

      - name: Test (Linux only - requires Docker)
        if: runner.os == 'Linux'
        run: cargo test --all-features --all-targets
        env:
          RUST_LOG: error

      - name: Test Docs (Linux only - requires Docker)
        if: runner.os == 'Linux'
        run: cargo test --all-features --doc
        env:
          RUST_LOG: error

      - name: Integration Test
        if: matrix.run-integration
        run: |
          mkdir -p ./dev/data/integration_test/
          RUST_LOG=warn,sqlx=info,refinery_core=error,keyring=info,nostr_relay_pool=error,mdk_sqlite_storage=error,tungstenite=error,integration_test=debug \
          cargo run --bin integration_test --features integration-tests -- \
          --data-dir ./dev/data/integration_test/ --logs-dir ./dev/data/integration_test/
          rm -rf ./dev/data/integration_test/

      - name: Stop Docker Compose services (Linux)
        if: always() && runner.os == 'Linux'
        run: docker compose down -v

  # Test against nightly (informational only)
  nightly:
    name: Nightly Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: nightly

      - name: Check with nightly
        run: cargo check --all-targets --all-features
